// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Change struct {
	Operation Operation `json:"operation"`
	Value     string    `json:"value"`
}

type GetResponse struct {
	Value string `json:"value"`
	Ok    bool   `json:"ok"`
}

type LengthResponse struct {
	Length int32 `json:"length"`
}

type Mutation struct {
}

type Query struct {
}

type SetInput struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type Subscription struct {
}

type Operation string

const (
	OperationAdd    Operation = "ADD"
	OperationUpdate Operation = "UPDATE"
	OperationDelete Operation = "DELETE"
)

var AllOperation = []Operation{
	OperationAdd,
	OperationUpdate,
	OperationDelete,
}

func (e Operation) IsValid() bool {
	switch e {
	case OperationAdd, OperationUpdate, OperationDelete:
		return true
	}
	return false
}

func (e Operation) String() string {
	return string(e)
}

func (e *Operation) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Operation(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Operation", str)
	}
	return nil
}

func (e Operation) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Operation) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Operation) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
